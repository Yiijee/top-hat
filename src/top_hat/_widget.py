"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/building_a_plugin/guides.html#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

from typing import TYPE_CHECKING

from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
from qtpy.QtWidgets import QHBoxLayout, QPushButton, QInputDialog, QWidget, QVBoxLayout, QLabel
from skimage.util import img_as_float

from .utils.colors import generate_random_hex_color
from .utils.data_loaders import FAFB_loader
from .utils.plotter import plot_tracts_placeholder

if TYPE_CHECKING:
    import napari
from napari.layers import Points


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.
def threshold_autogenerate_widget(
    img: "napari.types.ImageData",
    threshold: "float",
) -> "napari.types.LabelsData":
    return img_as_float(img) > threshold


# the magic_factory decorator lets us customize aspects of our widget
# we specify a widget type for the threshold parameter
# and use auto_call=True so the function is called whenever
# the value of a parameter changes
@magic_factory(
    threshold={"widget_type": "FloatSlider", "max": 1}, auto_call=True
)
def threshold_magic_widget(
    img_layer: "napari.layers.Image", threshold: "float"
) -> "napari.types.LabelsData":
    return img_as_float(img_layer.data) > threshold


# if we want even more control over our widget, we can use
# magicgui `Container`
class ImageThreshold(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self._image_layer_combo = create_widget(
            label="Image", annotation="napari.layers.Image"
        )
        self._threshold_slider = create_widget(
            label="Threshold", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1
        # use magicgui widgets directly
        self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

        # connect your own callbacks
        self._threshold_slider.changed.connect(self._threshold_im)
        self._invert_checkbox.changed.connect(self._threshold_im)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._image_layer_combo,
                self._threshold_slider,
                self._invert_checkbox,
            ]
        )

    def _threshold_im(self):
        image_layer = self._image_layer_combo.value
        if image_layer is None:
            return

        image = img_as_float(image_layer.data)
        name = image_layer.name + "_thresholded"
        threshold = self._threshold_slider.value
        if self._invert_checkbox.value:
            thresholded = image < threshold
        else:
            thresholded = image > threshold
        if name in self._viewer.layers:
            self._viewer.layers[name].data = thresholded
        else:
            self._viewer.add_labels(thresholded, name=name)


class ExampleQWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        btn = QPushButton("Click me!")
        btn.clicked.connect(self._on_click)

        self.setLayout(QHBoxLayout())
        self.layout().addWidget(btn)

    def _on_click(self):
        print("napari has", len(self.viewer.layers), "layers")


class PointSelectorWidget(QWidget):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        self.setLayout(QVBoxLayout())
        self.info_label = QLabel("Select points in the viewer to record (z, y, x) coordinates.")
        self.layout().addWidget(self.info_label)

        self.points_layer = viewer.add_points(name="Selected Points", ndim=3)
        self.points_layer.events.data.connect(self.on_points_added)

        # Add button to get cluster centroid
        self.centroid_btn = QPushButton("Get Cluster Centroid")
        self.centroid_btn.clicked.connect(self.get_cluster_centroid)
        self.layout().addWidget(self.centroid_btn)

    def on_points_added(self, event):
        coords = self.points_layer.data
        labels = [str(i+1) for i in range(len(coords))]
        self.points_layer.text = {'string': labels, 'size': 12, 'color': 'red'}
        info = "\n".join([
            f"{label}: {tuple(float(c) for c in coord)}"
            for label, coord in zip(labels, coords)
        ])
        self.info_label.setText(f"Selected points:\n{info}")

    def calculate_centroid(self, indices):
        """Return the centroid coordinates for selected indices."""
        coords = self.points_layer.data
        if len(coords) == 0 or not indices:
            return None
        selected_coords = coords[indices]
        centroid = selected_coords.mean(axis=0)
        return tuple(float(c) for c in centroid)

    def get_cluster_centroid(self):
        coords = self.points_layer.data
        if len(coords) == 0:
            self.info_label.setText("No points selected.")
            return None  

        indices_str, ok = QInputDialog.getText(
            self,
            "Input Point Indices",
            "Enter point indices (e.g., 1,2,3 or 1-5) used for calculating the cell cluster centroid:"
        )
        if not ok or not indices_str.strip():
            return None

        try:
            indices = []
            for part in indices_str.split(","):
                part = part.strip()
                if "-" in part:
                    start, end = map(int, part.split("-"))
                    indices.extend(range(start - 1, end))
                elif part:
                    indices.append(int(part) - 1)
            centroid_tuple = self.calculate_centroid(indices)
            if centroid_tuple is None:
                self.info_label.setText("No valid points for centroid.")
                return None
            self.info_label.setText(
                f"Selected points:\n{self.info_label.text().split('Selected points:\n')[-1]}\n"
                f"Centroid of points {indices_str}: {centroid_tuple}"
            )
             # in napari, create a new Points layer called LM_centroid, and show the centroid
            if "LM_centroid" in self.viewer.layers:
                self.viewer.layers["LM_centroid"].data = [centroid_tuple]
            else:
                self.viewer.add_points([centroid_tuple], name="LM_centroid", size=15, face_color="yellow")
            return centroid_tuple    
        except Exception as e:
            self.info_label.setText(f"Error: {e}")
            return None

    def find_matching_hemilineages(user_centroid, csv_path):
        """
        Given a user-selected centroid (x, y, z) and a CSV file containing
        hemilineage centroids and 3*RMSE, return a sorted list of hemilineages
        whose centroid spheres (radius=3*RMSE) contain the user centroid.

        Args:
            user_centroid (tuple): (x, y, z) coordinates of the user-selected centroid.
            csv_path (str): Absolute path to the CSV file.

        Returns:
            pd.DataFrame: DataFrame with columns ['hemilineage', 'distance', 'centroid_x', 'centroid_y', 'centroid_z', '3*RMSE'],
                        sorted by 'distance' ascending.
        """
 
        # Load hemilineage data
        df = pd.read_csv(csv_path)
        # Ensure columns: hemilineage, centroid_x, centroid_y, centroid_z, 3*RMSE
        required_cols = {'hemilineage', 'centroid_x', 'centroid_y', 'centroid_z', '3*RMSE'}
        if not required_cols.issubset(df.columns):
            raise ValueError(f"CSV must contain columns: {required_cols}")

        # Compute distances from user_centroid to each hemilineage centroid
        hemilineage_coords = df[['centroid_x', 'centroid_y', 'centroid_z']].values
        user_coords = np.array(user_centroid)
        distances = np.linalg.norm(hemilineage_coords - user_coords, axis=1)
        df['distance'] = distances

        matches = df[df['distance'] <= df['3*RMSE']].copy()
        matches = matches.sort_values('distance')

        hemilineage_names = matches['hemilineage'].tolist()
        return {'user_centroid': tuple(float(c) for c in user_centroid), 'hemilineages': hemilineage_names}



